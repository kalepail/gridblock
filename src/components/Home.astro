<script>
  const gridSize = 1280;
  const cellSize = 2;
  const canvasSize = gridSize * cellSize;

  interface SnakeSegment {
    x: number;
    y: number;
  }

  interface Snake {
    head: SnakeSegment;
    color: string;
    health: number;
  }

  let snakes: Snake[] = [];

  const directions = [
    { dx: 1, dy: 0 },
    { dx: -1, dy: 0 },
    { dx: 0, dy: 1 },
    { dx: 0, dy: -1 },
  ];

  const snakeCount = 2000;
  const initialHealth = 100;

  function fillSquare(context: CanvasRenderingContext2D, x: number, y: number, color: string): void {
    context.fillStyle = color;
    context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
  }

  const canvas = document.getElementById("myCanvas") as HTMLCanvasElement;
  if (!canvas) {
    console.error("Canvas element not found");
  } else {
    canvas.width = canvasSize;
    canvas.height = canvasSize;

    const context = canvas.getContext("2d");

    if (!context) {
      console.error("Unable to get 2D context");
    } else {
      initializeSnakes();

      requestAnimationFrame(function animate() {
        if (snakes.length) {
          moveSnakes(context);
          requestAnimationFrame(animate);
        } else {
          alert("All snakes died");
        }
      });
    }
  }

  function initializeSnakes(): void {
    snakes = [];

    for (let i = 0; i < snakeCount; i++) {
      const startX = Math.floor(Math.random() * gridSize);
      const startY = Math.floor(Math.random() * gridSize);
      const head = { x: startX, y: startY };
      const color = getRandomColor(); // getQuadrantColor(startX, startY);
      snakes.push({ head, color, health: initialHealth });
    }
  }

  function moveSnakes(context: CanvasRenderingContext2D): void {
    const maxAttempts = 4; // Maximum number of attempts to find a valid move

    snakes = snakes.filter((snake) => {
      let attempts = 0;
      let newHead: SnakeSegment;
      
      do {
        let newDirection = Math.floor(Math.random() * 4);

        // Increase chance of changing direction at edges or randomly
        if (Math.random() < 0.2 || isAtEdge(snake.head)) {
          newDirection = (newDirection + 1 + Math.floor(Math.random() * 3)) % 4;
        }

        newHead = {
          x: snake.head.x + directions[newDirection].dx,
          y: snake.head.y + directions[newDirection].dy,
        };

        attempts++;
      } while (
        (newHead.x < 0 || newHead.x >= gridSize || newHead.y < 0 || newHead.y >= gridSize || 
        (newHead.x === snake.head.x && newHead.y === snake.head.y)) && 
        attempts < maxAttempts
      );

      // If we couldn't find a valid move after max attempts, keep the snake in place
      if (attempts === maxAttempts) {
        newHead = { ...snake.head };
      }

      // Check if the new position has a different color
      const imageData = context.getImageData(newHead.x * cellSize, newHead.y * cellSize, 1, 1);
      const pixelColor = `rgb(${imageData.data[0]}, ${imageData.data[1]}, ${imageData.data[2]})`;
      
      if (pixelColor !== snake.color && pixelColor !== 'rgb(0, 0, 0)') {
        // Snake loses health if it hits a different color
        snake.health--;
        if (snake.health <= 0) {
          // Snake dies if health reaches 0
          return false;
        }
      }

      snake.head = newHead;
      fillSquare(context, newHead.x, newHead.y, snake.color);
      updateSnakeCount();
      return true;
    });
  }

  function isAtEdge(segment: SnakeSegment): boolean {
    return (
      segment.x <= 0 ||
      segment.x >= gridSize - 1 ||
      segment.y <= 0 ||
      segment.y >= gridSize - 1
    );
  }

  function getRandomColor(): string {
    // const colors = [
    //   'rgb(255, 0, 0)',   // Red (primary)
    //   'rgb(0, 255, 0)',   // Green (primary)
    //   'rgb(0, 0, 255)',   // Blue (primary)
    //   'rgb(255, 255, 0)', // Yellow (primary)
    //   'rgb(255, 0, 255)', // Magenta (tertiary)
    //   'rgb(0, 255, 255)', // Cyan (tertiary)
    // ];
    // return colors[Math.floor(Math.random() * colors.length)];
    const r = Math.floor(Math.random() * 256);
    const g = Math.floor(Math.random() * 256);
    const b = Math.floor(Math.random() * 256);
    return `rgb(${r}, ${g}, ${b})`;
  }

  function getQuadrantColor(x: number, y: number): string {
    const colors = [
      'rgb(255, 0, 0)',   // Red (primary)
      'rgb(0, 255, 0)',   // Green (primary)
      'rgb(0, 0, 255)',   // Blue (primary)
      'rgb(255, 255, 0)', // Yellow (primary)
    ];
    
    const quadrant = (x < gridSize / 2 ? 0 : 1) + (y < gridSize / 2 ? 0 : 2);
    
    // 80% chance to use the quadrant color, 20% chance for a random color
    return Math.random() < 0.8 ? colors[quadrant] : getRandomColor();
  }

  function updateSnakeCount() {
    const countElement = document.getElementById('snakeCount');
    
    if (countElement) {
      countElement.textContent = `Snakes alive: ${snakes.length}`;
    }
  }
</script>

<body>
  <canvas id="myCanvas"></canvas>
  <div id="snakeCount" style="position: fixed; bottom: 10px; left: 10px; color: black; background-color: white; padding: 5px; border-radius: 5px; font-family: Arial, sans-serif; z-index: 1000;"></div>
</body>
