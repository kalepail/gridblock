<script>
  const gridSize = 1000;
  const cellSize = 2;
  const canvasSize = gridSize * cellSize;

  interface SnakeSegment {
    x: number;
    y: number;
  }

  interface Snake {
    head: SnakeSegment;
    color: string;
  }

  let snakes: Snake[] = [];

  const directions = [
    { dx: 1, dy: 0 },
    { dx: -1, dy: 0 },
    { dx: 0, dy: 1 },
    { dx: 0, dy: -1 },
  ];

  const snakeCount = 1000;

  function fillSquare(context: CanvasRenderingContext2D, x: number, y: number, color: string): void {
    context.fillStyle = color;
    context.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
  }

  const canvas = document.getElementById("myCanvas") as HTMLCanvasElement;
  if (!canvas) {
    console.error("Canvas element not found");
  } else {
    canvas.width = canvasSize;
    canvas.height = canvasSize;

    const context = canvas.getContext("2d");

    if (!context) {
      console.error("Unable to get 2D context");
    } else {
      initializeSnakes();
      requestAnimationFrame(function animate() {
        moveSnakes(context);
        requestAnimationFrame(animate);
      });
    }
  }

  function initializeSnakes(): void {
    snakes = [];

    for (let i = 0; i < snakeCount; i++) {
      const startX = Math.floor(Math.random() * gridSize);
      const startY = Math.floor(Math.random() * gridSize);
      const head = { x: startX, y: startY };
      const color = getRandomColor();
      snakes.push({ head, color });
    }
  }

  function moveSnakes(context: CanvasRenderingContext2D): void {
    snakes.forEach((snake) => {
      let newHead: SnakeSegment;
      let attempts = 0;
      const maxAttempts = 4; // Maximum number of attempts to find a valid move

      do {
        let newDirection = Math.floor(Math.random() * 4);

        // Increase chance of changing direction at edges or randomly
        if (Math.random() < 0.2 || isAtEdge(snake.head)) {
          newDirection = (newDirection + 1 + Math.floor(Math.random() * 3)) % 4;
        }

        newHead = {
          x: snake.head.x + directions[newDirection].dx,
          y: snake.head.y + directions[newDirection].dy,
        };

        attempts++;
      } while (
        (newHead.x < 0 || newHead.x >= gridSize || newHead.y < 0 || newHead.y >= gridSize || 
        (newHead.x === snake.head.x && newHead.y === snake.head.y)) && 
        attempts < maxAttempts
      );

      // If we couldn't find a valid move after max attempts, keep the snake in place
      if (attempts === maxAttempts) {
        newHead = { ...snake.head };
      }

      snake.head = newHead;
      fillSquare(context, newHead.x, newHead.y, snake.color);
    });
  }

  function isAtEdge(segment: SnakeSegment): boolean {
    return (
      segment.x <= 0 ||
      segment.x >= gridSize - 1 ||
      segment.y <= 0 ||
      segment.y >= gridSize - 1
    );
  }

  function getRandomColor(): string {
    const r = Math.floor(Math.random() * 256);
    const g = Math.floor(Math.random() * 256);
    const b = Math.floor(Math.random() * 256);
    return `rgb(${r},${g},${b})`;
  }
</script>

<body>
  <canvas id="myCanvas"></canvas>
</body>
